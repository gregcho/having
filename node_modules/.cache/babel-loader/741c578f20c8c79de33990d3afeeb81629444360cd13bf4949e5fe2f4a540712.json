{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport authHeader from \"../services/auth-header\";\nexport default {\n  data() {\n    return {\n      loading: false,\n      snackbar: false,\n      text: \"\",\n      timeout: 2000,\n      page: 1,\n      itemsPerPage: 10,\n      totalItems: 0,\n      items: [],\n      filter1: [],\n      filters: {\n        supplier: \"\",\n        region: \"\",\n        productName: \"\"\n      },\n      completeData: [],\n      regionSuggestions: [],\n      productSuggestions: [],\n      headers: [{\n        text: \"ID\",\n        value: \"idx\"\n      }, {\n        text: \"Supplier\",\n        value: \"Supplier\"\n      }, {\n        text: \"Region\",\n        value: \"Region\"\n      }, {\n        text: \"Product Name\",\n        value: \"ProductName\"\n      }, {\n        text: \"Status\",\n        value: \"status\",\n        sortable: false\n      }],\n      inputMsg: null,\n      // 선택된 항목 (v-model과 바인딩)\n      search: \"\" // 검색어 (search-input.sync와 바인딩)\n    };\n  },\n\n  created() {\n    this.getData();\n  },\n  methods: {\n    fetchItems(query) {\n      this.loading = true; // 로딩 상태 활성화\n      console.log(\"str=>\", query);\n      if (query !== \"\") {\n        axios.get(\"/parts/supplier/\", {\n          headers: authHeader(),\n          params: {\n            query\n          }\n        }).then(response => {\n          console.log(\"resp=>\", response.data);\n          this.filter1 = response.data; // 서버에서 가져온 데이터로 업데이트\n        }).catch(error => {\n          console.log(\"err\", error.response);\n        });\n      }\n    },\n    //자동검색 리스트에서 바깥부분 클릭시 리스트 닫음\n    onClickOutside() {\n      this.autoSearchList = false;\n    },\n    pageChanged(newPage) {\n      this.page = newPage;\n      this.getData(); // Re-fetch data when page changes\n    },\n\n    itemsPerPageChanged(newItemsPerPage) {\n      this.itemsPerPage = newItemsPerPage;\n      this.getData(); // Re-fetch data when items per page changes\n    },\n\n    navigateToDetail(item) {\n      this.$router.push({\n        name: 'DetailPage',\n        params: {\n          item: JSON.stringify(item)\n        }\n      });\n    },\n    getData() {\n      this.loading = true;\n      axios.get(\"/parts/search\", {\n        headers: authHeader(),\n        params: {\n          page: this.page,\n          itemsPerPage: this.itemsPerPage,\n          ...this.filters\n        }\n      }).then(response => {\n        this.items = response.data.data;\n        this.totalItems = response.data.total;\n      }).catch(error => {\n        this.createSnackBar(\"서버에러: \" + error.message);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    createSnackBar(message) {\n      this.snackbar = true;\n      this.text = message;\n    }\n  },\n  computed: {\n    currentUser() {\n      return !!this.$store.state.auth.user;\n    }\n  },\n  watch: {\n    search(newSearch) {\n      console.log(newSearch);\n      if (newSearch) {\n        this.fetchItems(newSearch);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","authHeader","data","loading","snackbar","text","timeout","page","itemsPerPage","totalItems","items","filter1","filters","supplier","region","productName","completeData","regionSuggestions","productSuggestions","headers","value","sortable","inputMsg","search","created","getData","methods","fetchItems","query","console","log","get","params","then","response","catch","error","onClickOutside","autoSearchList","pageChanged","newPage","itemsPerPageChanged","newItemsPerPage","navigateToDetail","item","$router","push","name","JSON","stringify","total","createSnackBar","message","finally","computed","currentUser","$store","state","auth","user","watch","newSearch"],"sources":["src/views/PricingView.vue"],"sourcesContent":["<template>\r\n  <v-container class=\"pa-13 mb-13\">\r\n    <div v-if=\"!currentUser\">\r\n      <header class=\"jumbotron\">\r\n        <h3>{{ content }}</h3>\r\n      </header>\r\n    </div>\r\n    <div v-else>\r\n      <!-- 검색 필터 -->\r\n      <v-row class=\"align-center\">\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            :loading=\"loading\"\r\n            :items=\"filter1\"\r\n            :search-input.sync=\"search\"\r\n            v-model=\"inputMsg\"\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            return-object\r\n            placeholder=\"Search ...\"\r\n          >\r\n            <!-- 검색 결과 수 표시 -->\r\n          <template v-slot:prepend-item>\r\n            <v-list-item>\r\n              <v-list-item-title>{{ items.length }} items found</v-list-item-title>\r\n            </v-list-item>\r\n          </template>\r\n\r\n          <!-- 선택된 항목 -->\r\n          <template v-slot:selection=\"{ item }\">\r\n            {{ item.name }}\r\n          </template>\r\n\r\n          <!-- 드롭다운 항목 표시 -->\r\n          <template v-slot:item=\"{ item }\">\r\n            <v-list-item>\r\n              <v-list-item-content>\r\n                <v-list-item-title>\r\n                  <a :href=\"item.url\">{{ item.name }}</a>\r\n                </v-list-item-title>\r\n              </v-list-item-content>\r\n            </v-list-item>\r\n          </template>\r\n        </v-autocomplete>\r\n        </v-col>\r\n        <v-col>\r\n          <v-btn color=\"primary\" @click=\"getData\">\r\n            검색\r\n          </v-btn>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <!-- 데이터 테이블 -->\r\n      <v-data-table\r\n        :headers=\"headers\"\r\n        :items=\"items\"\r\n        :loading=\"loading\"\r\n        :page.sync=\"page\"\r\n        :items-per-page=\"itemsPerPage\"\r\n        :server-items-length=\"totalItems\"\r\n        item-key=\"idx\"\r\n        show-select\r\n        class=\"elevation-1\"\r\n        @click:row=\"navigateToDetail\"\r\n        @update:page=\"pageChanged\"\r\n        @update:items-per-page=\"itemsPerPageChanged\"\r\n      >\r\n      </v-data-table>\r\n\r\n      <!-- 알림 스낵바 -->\r\n      <v-snackbar v-model=\"snackbar\" :timeout=\"timeout\">\r\n        {{ text }}\r\n        <template v-slot:action=\"{ attrs }\">\r\n          <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar = false\">\r\n            Close\r\n          </v-btn>\r\n        </template>\r\n      </v-snackbar>\r\n    </div>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport authHeader from \"../services/auth-header\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      snackbar: false,\r\n      text: \"\",\r\n      timeout: 2000,\r\n      page: 1,\r\n      itemsPerPage: 10,\r\n      totalItems: 0,\r\n      items: [],\r\n      filter1: [],\r\n      filters: {\r\n        supplier: \"\",\r\n        region: \"\",\r\n        productName: \"\",\r\n      },\r\n      completeData: [],\r\n      regionSuggestions: [],\r\n      productSuggestions: [],\r\n      headers: [\r\n        { text: \"ID\", value: \"idx\" },\r\n        { text: \"Supplier\", value: \"Supplier\" },\r\n        { text: \"Region\", value: \"Region\" },\r\n        { text: \"Product Name\", value: \"ProductName\" },\r\n        { text: \"Status\", value: \"status\", sortable: false },\r\n      ],\r\n      inputMsg: null, // 선택된 항목 (v-model과 바인딩)\r\n      search: \"\", // 검색어 (search-input.sync와 바인딩)\r\n    };\r\n  },\r\n  created() {\r\n    this.getData();\r\n  },\r\n  methods: {\r\n    fetchItems(query){\r\n      this.loading = true; // 로딩 상태 활성화\r\n      console.log(\"str=>\", query)\r\n      if(query !== \"\"){\r\n        axios.get(\"/parts/supplier/\",{\r\n            headers: authHeader(),\r\n            params: {\r\n              query\r\n            },\r\n          })\r\n          .then(response => {\r\n            console.log(\"resp=>\", response.data)\r\n            this.filter1 = response.data; // 서버에서 가져온 데이터로 업데이트\r\n          }).catch(error => {\r\n          console.log(\"err\", error.response);\r\n        })\r\n      }\r\n    },\r\n    //자동검색 리스트에서 바깥부분 클릭시 리스트 닫음\r\n    onClickOutside () {\r\n      this.autoSearchList = false\r\n    },\r\n    pageChanged(newPage) {\r\n      this.page = newPage;\r\n      this.getData(); // Re-fetch data when page changes\r\n    },\r\n    itemsPerPageChanged(newItemsPerPage) {\r\n      this.itemsPerPage = newItemsPerPage;\r\n      this.getData(); // Re-fetch data when items per page changes\r\n    },\r\n    navigateToDetail(item) {\r\n      this.$router.push({\r\n        name: 'DetailPage',\r\n        params: { item: JSON.stringify(item) },\r\n      });\r\n    },\r\n    getData() {\r\n      this.loading = true;\r\n      axios\r\n        .get(\"/parts/search\", {\r\n          headers: authHeader(),\r\n          params: {\r\n            page: this.page,\r\n            itemsPerPage: this.itemsPerPage,\r\n            ...this.filters,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          this.items = response.data.data;\r\n          this.totalItems = response.data.total;\r\n        })\r\n        .catch((error) => {\r\n          this.createSnackBar(\"서버에러: \" + error.message);\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    createSnackBar(message) {\r\n      this.snackbar = true;\r\n      this.text = message;\r\n    },\r\n  },\r\n  \r\n  computed: {\r\n    currentUser() {\r\n      return !!this.$store.state.auth.user;\r\n    },\r\n  },\r\n  watch: {\r\n    search(newSearch) {\r\n      console.log(newSearch)\r\n      if (newSearch) {\r\n        this.fetchItems(newSearch);\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";AAoFA,OAAAA,KAAA;AACA,OAAAC,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,QAAA;MACAC,IAAA;MACAC,OAAA;MACAC,IAAA;MACAC,YAAA;MACAC,UAAA;MACAC,KAAA;MACAC,OAAA;MACAC,OAAA;QACAC,QAAA;QACAC,MAAA;QACAC,WAAA;MACA;MACAC,YAAA;MACAC,iBAAA;MACAC,kBAAA;MACAC,OAAA,GACA;QAAAd,IAAA;QAAAe,KAAA;MAAA,GACA;QAAAf,IAAA;QAAAe,KAAA;MAAA,GACA;QAAAf,IAAA;QAAAe,KAAA;MAAA,GACA;QAAAf,IAAA;QAAAe,KAAA;MAAA,GACA;QAAAf,IAAA;QAAAe,KAAA;QAAAC,QAAA;MAAA,EACA;MACAC,QAAA;MAAA;MACAC,MAAA;IACA;EACA;;EACAC,QAAA;IACA,KAAAC,OAAA;EACA;EACAC,OAAA;IACAC,WAAAC,KAAA;MACA,KAAAzB,OAAA;MACA0B,OAAA,CAAAC,GAAA,UAAAF,KAAA;MACA,IAAAA,KAAA;QACA5B,KAAA,CAAA+B,GAAA;UACAZ,OAAA,EAAAlB,UAAA;UACA+B,MAAA;YACAJ;UACA;QACA,GACAK,IAAA,CAAAC,QAAA;UACAL,OAAA,CAAAC,GAAA,WAAAI,QAAA,CAAAhC,IAAA;UACA,KAAAS,OAAA,GAAAuB,QAAA,CAAAhC,IAAA;QACA,GAAAiC,KAAA,CAAAC,KAAA;UACAP,OAAA,CAAAC,GAAA,QAAAM,KAAA,CAAAF,QAAA;QACA;MACA;IACA;IACA;IACAG,eAAA;MACA,KAAAC,cAAA;IACA;IACAC,YAAAC,OAAA;MACA,KAAAjC,IAAA,GAAAiC,OAAA;MACA,KAAAf,OAAA;IACA;;IACAgB,oBAAAC,eAAA;MACA,KAAAlC,YAAA,GAAAkC,eAAA;MACA,KAAAjB,OAAA;IACA;;IACAkB,iBAAAC,IAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QACAC,IAAA;QACAf,MAAA;UAAAY,IAAA,EAAAI,IAAA,CAAAC,SAAA,CAAAL,IAAA;QAAA;MACA;IACA;IACAnB,QAAA;MACA,KAAAtB,OAAA;MACAH,KAAA,CACA+B,GAAA;QACAZ,OAAA,EAAAlB,UAAA;QACA+B,MAAA;UACAzB,IAAA,OAAAA,IAAA;UACAC,YAAA,OAAAA,YAAA;UACA,QAAAI;QACA;MACA,GACAqB,IAAA,CAAAC,QAAA;QACA,KAAAxB,KAAA,GAAAwB,QAAA,CAAAhC,IAAA,CAAAA,IAAA;QACA,KAAAO,UAAA,GAAAyB,QAAA,CAAAhC,IAAA,CAAAgD,KAAA;MACA,GACAf,KAAA,CAAAC,KAAA;QACA,KAAAe,cAAA,YAAAf,KAAA,CAAAgB,OAAA;MACA,GACAC,OAAA;QACA,KAAAlD,OAAA;MACA;IACA;IACAgD,eAAAC,OAAA;MACA,KAAAhD,QAAA;MACA,KAAAC,IAAA,GAAA+C,OAAA;IACA;EACA;EAEAE,QAAA;IACAC,YAAA;MACA,cAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA,CAAAC,IAAA;IACA;EACA;EACAC,KAAA;IACArC,OAAAsC,SAAA;MACAhC,OAAA,CAAAC,GAAA,CAAA+B,SAAA;MACA,IAAAA,SAAA;QACA,KAAAlC,UAAA,CAAAkC,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}