{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport authHeader from \"../services/auth-header\";\nexport default {\n  data() {\n    return {\n      selectedSuppliers: [],\n      selectedRegion: [],\n      selectedProductName: [],\n      selectedDepartment: [],\n      selectedCompanyName: [],\n      selectedBusinessType: [],\n      selectedCountryRegion: [],\n      selectedSearchCriteria: [],\n      filterSuppliers: [],\n      regions: [],\n      productNames: [],\n      departments: [],\n      companyNames: [],\n      businessTypes: [],\n      countryRegions: [],\n      searchCriteriaOptions: [],\n      filter1: [],\n      loading: false,\n      snackbar: false,\n      text: \"\",\n      timeout: 2000,\n      page: 1,\n      itemsPerPage: 10,\n      totalItems: 0,\n      items: [],\n      filters: {\n        supplier: \"\",\n        region: \"\",\n        productName: \"\"\n      },\n      completeData: [],\n      regionSuggestions: [],\n      productSuggestions: [],\n      headers: [{\n        text: \"ID\",\n        value: \"idx\"\n      }, {\n        text: \"Supplier\",\n        value: \"Supplier\"\n      }, {\n        text: \"Region\",\n        value: \"Region\"\n      }, {\n        text: \"Product Name\",\n        value: \"ProductName\"\n      }, {\n        text: \"Status\",\n        value: \"status\",\n        sortable: false\n      }],\n      inputMsg: null,\n      // 선택된 항목 (v-model과 바인딩)\n      search: \"\",\n      // 검색어 (search-input.sync와 바인딩)\n      searchRegion: \"\",\n      searchProductName: \"\",\n      searchDepartment: \"\",\n      searchSearchCriteria: \"\",\n      searchCountryRegion: \"\",\n      searchBusinessType: \"\",\n      searchCompanyName: \"\"\n    };\n  },\n  created() {\n    this.getData();\n  },\n  methods: {\n    removeSupplier(index) {\n      // Chip 닫기 버튼 클릭 시 선택 해제\n      this.selectedSuppliers.splice(index, 1);\n    },\n    removeRegion(index) {\n      this.selectedRegion.splice(index, 1);\n    },\n    removeProductName(index) {\n      this.selectedProductName.splice(index, 1);\n    },\n    removeDepartment(index) {\n      this.selectedDepartment.splice(index, 1);\n    },\n    removeCompanyName(index) {\n      this.selectedCompanyName.splice(index, 1);\n    },\n    removeBusinessType(index) {\n      this.selectedBusinessType.splice(index, 1);\n    },\n    removeCountryRegion(index) {\n      this.selectedCountryRegion.splice(index, 1);\n    },\n    removeSearchCriteria(index) {\n      this.selectedSearchCriteria.splice(index, 1);\n    },\n    onItemClick(item) {\n      console.log(\"Clicked item:\", item);\n      this.inputMsg = item.Supplier; // 선택된 값을 inputMsg에 저장\n    },\n\n    fetchData(endpoint, targetArray, query = \"\") {\n      console.log(\"filters=>\", this.selectedSuppliers);\n      this.loading = true;\n      axios.get(endpoint, {\n        headers: authHeader(),\n        params: {\n          query\n        }\n      }).then(response => {\n        console.log(`${endpoint} Response:`, response.data);\n        console.log(\"rtn=>\", targetArray);\n        this[targetArray] = response.data; // 대상 배열에 데이터 업데이트\n      }).catch(error => {\n        console.log(`Error fetching ${endpoint}:`, error.response);\n        this[targetArray] = []; // 에러 발생 시 항목 초기화\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    // 각 데이터 호출\n    fetchSuppliers(query) {\n      this.fetchData(\"/parts/supplier/\", \"filterSuppliers\", query);\n    },\n    fetchRegions(query) {\n      this.fetchData(\"/parts/region/\", \"regions\", query);\n    },\n    fetchProductNames(query) {\n      this.fetchData(\"/parts/product-name/\", \"productNames\", query);\n    },\n    fetchDepartments(query) {\n      this.fetchData(\"/parts/department/\", \"departments\", query);\n    },\n    fetchCompanyNames(query) {\n      this.fetchData(\"/parts/company-name/\", \"companyNames\", query);\n    },\n    fetchBusinessTypes(query) {\n      this.fetchData(\"/parts/business-type/\", \"businessTypes\", query);\n    },\n    fetchCountryRegions(query) {\n      this.fetchData(\"/parts/country-region/\", \"countryRegions\", query);\n    },\n    fetchSearchCriteria(query) {\n      this.fetchData(\"/parts/search-criteria/\", \"searchCriteriaOptions\", query);\n    },\n    //자동검색 리스트에서 바깥부분 클릭시 리스트 닫음\n    onClickOutside() {\n      this.autoSearchList = false;\n    },\n    pageChanged(newPage) {\n      this.page = newPage;\n      this.getData(); // Re-fetch data when page changes\n    },\n\n    itemsPerPageChanged(newItemsPerPage) {\n      this.itemsPerPage = newItemsPerPage;\n      this.getData(); // Re-fetch data when items per page changes\n    },\n\n    navigateToDetail(item) {\n      this.$router.push({\n        name: 'DetailPage',\n        params: {\n          item: JSON.stringify(item)\n        }\n      });\n    },\n    getData() {\n      this.loading = true;\n      axios.get(\"/parts/search\", {\n        headers: authHeader(),\n        params: {\n          page: this.page,\n          itemsPerPage: this.itemsPerPage,\n          ...this.filters\n        }\n      }).then(response => {\n        this.items = response.data.data;\n        this.totalItems = response.data.total;\n      }).catch(error => {\n        this.createSnackBar(\"서버에러: \" + error.message);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    createSnackBar(message) {\n      this.snackbar = true;\n      this.text = message;\n    }\n  },\n  computed: {\n    currentUser() {\n      return !!this.$store.state.auth.user;\n    }\n  },\n  watch: {\n    search(query) {\n      if (query) {\n        this.fetchSuppliers(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchRegion(query) {\n      console.log(\"searchRegion\");\n      if (query) {\n        this.fetchRegions(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchProductName(query) {\n      if (query) {\n        this.fetchProductNames(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchDepartment(query) {\n      if (query) {\n        this.fetchDepartments(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchSearchCriteria(query) {\n      if (query) {\n        this.fetchSearchCriteria(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchCountryRegion(query) {\n      if (query) {\n        this.fetchCountryRegions(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchBusinessType(query) {\n      if (query) {\n        this.fetchBusinessTypes(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    },\n\n    searchCompanyName(query) {\n      if (query) {\n        this.fetchCompanyNames(query);\n      } else {\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","authHeader","data","selectedSuppliers","selectedRegion","selectedProductName","selectedDepartment","selectedCompanyName","selectedBusinessType","selectedCountryRegion","selectedSearchCriteria","filterSuppliers","regions","productNames","departments","companyNames","businessTypes","countryRegions","searchCriteriaOptions","filter1","loading","snackbar","text","timeout","page","itemsPerPage","totalItems","items","filters","supplier","region","productName","completeData","regionSuggestions","productSuggestions","headers","value","sortable","inputMsg","search","searchRegion","searchProductName","searchDepartment","searchSearchCriteria","searchCountryRegion","searchBusinessType","searchCompanyName","created","getData","methods","removeSupplier","index","splice","removeRegion","removeProductName","removeDepartment","removeCompanyName","removeBusinessType","removeCountryRegion","removeSearchCriteria","onItemClick","item","console","log","Supplier","fetchData","endpoint","targetArray","query","get","params","then","response","catch","error","finally","fetchSuppliers","fetchRegions","fetchProductNames","fetchDepartments","fetchCompanyNames","fetchBusinessTypes","fetchCountryRegions","fetchSearchCriteria","onClickOutside","autoSearchList","pageChanged","newPage","itemsPerPageChanged","newItemsPerPage","navigateToDetail","$router","push","name","JSON","stringify","total","createSnackBar","message","computed","currentUser","$store","state","auth","user","watch"],"sources":["src/views/PricingView.vue"],"sourcesContent":["<template>\r\n  <v-container class=\"pa-13 mb-13\">\r\n    <div v-if=\"!currentUser\">\r\n      <header class=\"jumbotron\">\r\n        <h3>{{ content }}</h3>\r\n      </header>\r\n    </div>\r\n    <div v-else>\r\n      <!-- 검색 필터 -->\r\n      <v-row class=\"align-center\">\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedSuppliers\" \r\n            :items=\"filterSuppliers\"\r\n            item-text=\"Supplier\"\r\n            item-value=\"Supplier\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select suppliers...\"\r\n            persistent-hint\r\n            :search-input.sync=\"search\"\r\n          >\r\n            <!-- 검색 결과 수 표시 -->\r\n          <template v-slot:prepend-item>\r\n            <v-list-item>\r\n              <v-list-item-title>{{ filterSuppliers.length }} items found</v-list-item-title>\r\n            </v-list-item>\r\n          </template>\r\n\r\n          <!-- 선택된 항목 -->\r\n          <template v-slot:selection=\"{ item, index }\">\r\n            <v-chip\r\n              v-if=\"item\"\r\n              close\r\n              @click:close=\"removeSupplier(index)\"\r\n            >\r\n              {{ item.Supplier }}\r\n            </v-chip>\r\n          </template>\r\n        </v-autocomplete>\r\n        </v-col>\r\n        <!-- -->\r\n        <!-- Region -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedRegion\"\r\n            :items=\"regions\"\r\n            item-text=\"Region\"\r\n            item-value=\"Region\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Region...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchRegion\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ regions.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeRegion(index)\">\r\n                {{ item }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n        <!--2222222-->\r\n        \r\n        <!-- Product Name -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedProductName\"\r\n            :items=\"productNames\"\r\n            item-text=\"ProductName\"\r\n            item-value=\"ProductName\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Product Name...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchProductName\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ productNames.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeProductName(index)\">\r\n                {{ item }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n\r\n        <!-- Department -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedDepartment\"\r\n            :items=\"departments\"\r\n            item-text=\"Department\"\r\n            item-value=\"Department\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Department...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchDepartment\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ departments.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeDepartment(index)\">\r\n                {{ item.Department }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n\r\n        <!-- Company Name -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedCompanyName\"\r\n            :items=\"companyNames\"\r\n            item-text=\"CompanyName\"\r\n            item-value=\"CompanyName\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Company Name...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchCompanyName\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ companyNames.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeCompanyName(index)\">\r\n                {{ item.CompanyName }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n\r\n        <!-- Business Type -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedBusinessType\"\r\n            :items=\"businessTypes\"\r\n            item-text=\"BusinessType\"\r\n            item-value=\"BusinessType\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Business Type...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchBusinessType\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ businessTypes.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeBusinessType(index)\">\r\n                {{ item.BusinessType }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n\r\n        <!-- Country/Region -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedCountryRegion\"\r\n            :items=\"countryRegions\"\r\n            item-text=\"CountryRegion\"\r\n            item-value=\"CountryRegion\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Country/Region...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchCountryRegion\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ countryRegions.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeCountryRegion(index)\">\r\n                {{ item.CountryRegion }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n\r\n        <!-- Search Criteria -->\r\n        <v-col cols=\"3\">\r\n          <v-autocomplete \r\n            v-model=\"selectedSearchCriteria\"\r\n            :items=\"searchCriteriaOptions\"\r\n            item-text=\"SearchCriteriaOption\"\r\n            item-value=\"SearchCriteriaOption\"\r\n            multiple\r\n            chip\r\n            flat\r\n            hide-no-data\r\n            hide-details\r\n            placeholder=\"Select Search Criteria...\"\r\n            persistent-hint\r\n            :search-input.sync=\"searchSearchCriteria\"\r\n          >\r\n            <template v-slot:prepend-item>\r\n              <v-list-item>\r\n                <v-list-item-title>{{ searchCriteriaOptions.length }} items found</v-list-item-title>\r\n              </v-list-item>\r\n            </template>\r\n\r\n            <template v-slot:selection=\"{ item, index }\">\r\n              <v-chip v-if=\"item\" close @click:close=\"removeSearchCriteria(index)\">\r\n                {{ item }}\r\n              </v-chip>\r\n            </template>\r\n          </v-autocomplete>\r\n        </v-col>\r\n        <!-- 검색 -->\r\n        <v-col>\r\n          <v-btn color=\"primary\" @click=\"getData\">\r\n            검색\r\n          </v-btn>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <!-- 데이터 테이블 -->\r\n      <v-data-table\r\n        :headers=\"headers\"\r\n        :items=\"items\"\r\n        :loading=\"loading\"\r\n        :page.sync=\"page\"\r\n        :items-per-page=\"itemsPerPage\"\r\n        :server-items-length=\"totalItems\"\r\n        item-key=\"idx\"\r\n        show-select\r\n        class=\"elevation-1\"\r\n        @click:row=\"navigateToDetail\"\r\n        @update:page=\"pageChanged\"\r\n        @update:items-per-page=\"itemsPerPageChanged\"\r\n      >\r\n      </v-data-table>\r\n\r\n      <!-- 알림 스낵바 -->\r\n      <v-snackbar v-model=\"snackbar\" :timeout=\"timeout\">\r\n        {{ text }}\r\n        <template v-slot:action=\"{ attrs }\">\r\n          <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar = false\">\r\n            Close\r\n          </v-btn>\r\n        </template>\r\n      </v-snackbar>\r\n    </div>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport authHeader from \"../services/auth-header\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedSuppliers: [],\r\n      selectedRegion: [],\r\n      selectedProductName: [],\r\n      selectedDepartment: [],\r\n      selectedCompanyName: [],\r\n      selectedBusinessType: [],\r\n      selectedCountryRegion: [],\r\n      selectedSearchCriteria: [],\r\n      filterSuppliers: [],\r\n      regions: [],\r\n      productNames: [],\r\n      departments: [],\r\n      companyNames: [],\r\n      businessTypes: [],\r\n      countryRegions: [],\r\n      searchCriteriaOptions: [],\r\n      filter1: [],\r\n      loading: false,\r\n      snackbar: false,\r\n      text: \"\",\r\n      timeout: 2000,\r\n      page: 1,\r\n      itemsPerPage: 10,\r\n      totalItems: 0,\r\n      items: [],\r\n      filters: {\r\n        supplier: \"\",\r\n        region: \"\",\r\n        productName: \"\",\r\n      },\r\n      completeData: [],\r\n      regionSuggestions: [],\r\n      productSuggestions: [],\r\n      headers: [\r\n        { text: \"ID\", value: \"idx\" },\r\n        { text: \"Supplier\", value: \"Supplier\" },\r\n        { text: \"Region\", value: \"Region\" },\r\n        { text: \"Product Name\", value: \"ProductName\" },\r\n        { text: \"Status\", value: \"status\", sortable: false },\r\n      ],\r\n      inputMsg: null, // 선택된 항목 (v-model과 바인딩)\r\n      search: \"\", // 검색어 (search-input.sync와 바인딩)\r\n      searchRegion: \"\",\r\n      searchProductName: \"\",\r\n      searchDepartment: \"\",\r\n      searchSearchCriteria: \"\",\r\n      searchCountryRegion: \"\",\r\n      searchBusinessType: \"\",\r\n      searchCompanyName: \"\",\r\n    };\r\n  },\r\n  created() {\r\n    this.getData();\r\n  },\r\n  methods: {\r\n    removeSupplier(index) {\r\n      // Chip 닫기 버튼 클릭 시 선택 해제\r\n      this.selectedSuppliers.splice(index, 1);\r\n    },\r\n    removeRegion(index) {\r\n      this.selectedRegion.splice(index, 1);\r\n    },\r\n    removeProductName(index) {\r\n      this.selectedProductName.splice(index, 1);\r\n    },\r\n    removeDepartment(index) {\r\n      this.selectedDepartment.splice(index, 1);\r\n    },\r\n    removeCompanyName(index) {\r\n      this.selectedCompanyName.splice(index, 1);\r\n    },\r\n    removeBusinessType(index) {\r\n      this.selectedBusinessType.splice(index, 1);\r\n    },\r\n    removeCountryRegion(index) {\r\n      this.selectedCountryRegion.splice(index, 1);\r\n    },\r\n    removeSearchCriteria(index) {\r\n      this.selectedSearchCriteria.splice(index, 1);\r\n    },\r\n    onItemClick(item) {\r\n      console.log(\"Clicked item:\", item);\r\n      this.inputMsg = item.Supplier; // 선택된 값을 inputMsg에 저장\r\n    },\r\n    fetchData(endpoint, targetArray, query = \"\") {\r\n      console.log(\"filters=>\", this.selectedSuppliers)\r\n      this.loading = true;\r\n      axios\r\n        .get(endpoint, {\r\n          headers: authHeader(),\r\n          params: { query },\r\n        })\r\n        .then((response) => {\r\n          console.log(`${endpoint} Response:`, response.data);\r\n          console.log(\"rtn=>\", targetArray)\r\n          this[targetArray] = response.data; // 대상 배열에 데이터 업데이트\r\n        })\r\n        .catch((error) => {\r\n          console.log(`Error fetching ${endpoint}:`, error.response);\r\n          this[targetArray] = []; // 에러 발생 시 항목 초기화\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    // 각 데이터 호출\r\n    fetchSuppliers(query) {\r\n      this.fetchData(\"/parts/supplier/\", \"filterSuppliers\", query);\r\n    },\r\n    fetchRegions(query) {\r\n      this.fetchData(\"/parts/region/\", \"regions\", query);\r\n    },\r\n    fetchProductNames(query) {\r\n      this.fetchData(\"/parts/product-name/\", \"productNames\", query);\r\n    },\r\n    fetchDepartments(query) {\r\n      this.fetchData(\"/parts/department/\", \"departments\", query);\r\n    },\r\n    fetchCompanyNames(query) {\r\n      this.fetchData(\"/parts/company-name/\", \"companyNames\", query);\r\n    },\r\n    fetchBusinessTypes(query) {\r\n      this.fetchData(\"/parts/business-type/\", \"businessTypes\", query);\r\n    },\r\n    fetchCountryRegions(query) {\r\n      this.fetchData(\"/parts/country-region/\", \"countryRegions\", query);\r\n    },\r\n    fetchSearchCriteria(query) {\r\n      this.fetchData(\"/parts/search-criteria/\", \"searchCriteriaOptions\", query);\r\n    },\r\n    //자동검색 리스트에서 바깥부분 클릭시 리스트 닫음\r\n    onClickOutside () {\r\n      this.autoSearchList = false\r\n    },\r\n    pageChanged(newPage) {\r\n      this.page = newPage;\r\n      this.getData(); // Re-fetch data when page changes\r\n    },\r\n    itemsPerPageChanged(newItemsPerPage) {\r\n      this.itemsPerPage = newItemsPerPage;\r\n      this.getData(); // Re-fetch data when items per page changes\r\n    },\r\n    navigateToDetail(item) {\r\n      this.$router.push({\r\n        name: 'DetailPage',\r\n        params: { item: JSON.stringify(item) },\r\n      });\r\n    },\r\n    getData() {\r\n      this.loading = true;\r\n      axios\r\n        .get(\"/parts/search\", {\r\n          headers: authHeader(),\r\n          params: {\r\n            page: this.page,\r\n            itemsPerPage: this.itemsPerPage,\r\n            ...this.filters,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          this.items = response.data.data;\r\n          this.totalItems = response.data.total;\r\n        })\r\n        .catch((error) => {\r\n          this.createSnackBar(\"서버에러: \" + error.message);\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n    createSnackBar(message) {\r\n      this.snackbar = true;\r\n      this.text = message;\r\n    },\r\n  },\r\n  \r\n  computed: {\r\n    currentUser() {\r\n      return !!this.$store.state.auth.user;\r\n    },\r\n  },\r\n  watch: {\r\n    search(query) {\r\n      if (query) {\r\n        this.fetchSuppliers(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchRegion(query) {\r\n      console.log(\"searchRegion\")\r\n      if (query) {\r\n        this.fetchRegions(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchProductName(query) {\r\n      if (query) {\r\n        this.fetchProductNames(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchDepartment(query) {\r\n      if (query) {\r\n        this.fetchDepartments(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchSearchCriteria(query) {\r\n      if (query) {\r\n        this.fetchSearchCriteria(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchCountryRegion(query) {\r\n      if (query) {\r\n        this.fetchCountryRegions(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchBusinessType(query) {\r\n      if (query) {\r\n        this.fetchBusinessTypes(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n    searchCompanyName(query) {\r\n      if (query) {\r\n        this.fetchCompanyNames(query);\r\n      } else {\r\n        this.filter1 = []; // 검색어가 없으면 항목 초기화\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}